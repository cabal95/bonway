Need to check all comparisons and make sure they are case insensitive when
looking at service names, host names, etc.

Relay needs to try and renew cached records once they have reached less
than half their time, and again at 1/4 TTL.

Need to properly assemble the NSEC records and A records when sending an
answer packet to speed things up.

Need a WAN mode which allows site-to-site VPN tunnels to work. Maybe just
a secondary UDP port with a few bytes of overhead to identify the server
and the "interface" (a remote server might provide a staff and public
interface which need to be treated differently).

--

Need a short-term caching system when reading packets, we need to be able
to check for the TC bit on queries and re-assembly packets into the larger
packets.

Re-assembled packets should be flagged as either a query or a response.

When sending, individual RRs should be sent so they can be queued up
and sent in bulk.

---







Need some helper functions in mdns_util that generate RRs needed for
various things. Probably should return a list of the records. Maybe need
a special struct to return the records in the proper types (AN, NS, AR).

Three objects will be needed.

1) An object for handling "local" services and name registration, such as
   to indicate that the SSH service is available. It should have a helper
   class that can read the XML formatted files used by Avahi.

2) An object for handling "relay" services and name lookup. It should provide
   caching for non-unique records (such as PTR records for _ssh._tcp) but
   only pass-thru handling of unique records, such as A records. It should
   also provide a "restricted" option that will only pass-thru A records
   if they exist in the cache for an approved SRV (PTR?) record.

3) An object for interfacing the above two objects with the mdns_socket
   object. This object will basically be the front end interface that the
   "user" will interact with. It will need to pass incoming packets to
   the local and relay objects so they can process what they need to do
   and it will need to provide a way for the local and relay objects to
   send any data back to the network.


The first two objects should have a similar public API interface to each
other to keep things simple. The API should also be easy to understand and
use in case the "user" will want to write their own interface object to
replace #3.
